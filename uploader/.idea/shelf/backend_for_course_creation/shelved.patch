Index: src/main/java/era/uploader/controller/StudentMetaData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/era/uploader/controller/StudentMetaData.java	(revision )
+++ src/main/java/era/uploader/controller/StudentMetaData.java	(revision )
@@ -0,0 +1,67 @@
+package era.uploader.controller;
+
+import com.google.common.collect.Multimap;
+import era.uploader.data.model.Course;
+import era.uploader.data.model.Student;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.collections.ObservableList;
+
+/**
+ * A <em>ViewModel</em> that holds meta data of students
+ */
+public class StudentMetaData {
+    private final SimpleStringProperty studentName = new SimpleStringProperty("");
+    private final SimpleStringProperty studentId = new SimpleStringProperty("");
+    private final SimpleStringProperty courseName = new SimpleStringProperty("");
+
+    public StudentMetaData(
+            String studentName,
+            String studentId,
+            String courseName
+    ) {
+        setStudentName(studentName);
+        setStudentId(studentId);
+        setCourseName(courseName);
+    }
+
+    public String getStudentName() {
+        return studentName.get();
+    }
+
+    public SimpleStringProperty studentNameProperty() {
+        return studentName;
+    }
+
+    public void setStudentName(String studentName) {
+        this.studentName.set(studentName);
+    }
+
+    public String getStudentId() {
+        return studentId.get();
+    }
+
+    public SimpleStringProperty studentIdProperty() {
+        return studentId;
+    }
+
+    public void setStudentId(String studentId) {
+        this.studentId.set(studentId);
+    }
+
+    public String getCourseName() {
+        return courseName.get();
+    }
+
+    public SimpleStringProperty courseNameProperty() {
+        return courseName;
+    }
+
+    public void setCourseName(String courseName) {
+        this.courseName.set(courseName);
+    }
+
+    public static ObservableList<StudentMetaData> fromMultimap(Multimap<Course, Student> coursesToStudents) {
+
+        return null;
+    }
+}
Index: src/main/java/era/uploader/view/UINavigator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package era.uploader.view;\n\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport javafx.stage.Window;\n\nimport java.io.IOException;\n\npublic class UINavigator {\n\n    public static final int GUI_WIDTH = 1000;\n    public static final int GUI_HEIGHT = 600;\n\n    private Scene mainScene;\n    private Window primaryWindow;\n\n    public UINavigator(Scene scene){\n\n        this.mainScene = scene;\n        this.primaryWindow = scene.getWindow();\n\n        this.primaryWindow.setWidth(GUI_WIDTH);\n        this.primaryWindow.setHeight(GUI_HEIGHT);\n\n    }\n\n    public void changeToHome() throws IOException {\n\n        Parent homeView = FXMLLoader.load(getClass().getResource(\"/gui/file-explorer.fxml\"));\n\n        mainScene.setRoot(homeView);\n\n    }\n\n    public void changeToScan() throws IOException {\n\n        Parent scanView = FXMLLoader.load(getClass().getResource(\"/gui/scan-pdf.fxml\"));\n\n        mainScene.setRoot(scanView);\n\n    }\n\n    public Window getPrimaryStage() {\n        return primaryWindow;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/era/uploader/view/UINavigator.java	(date 1511933788000)
+++ src/main/java/era/uploader/view/UINavigator.java	(revision )
@@ -4,15 +4,14 @@
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Parent;
 import javafx.scene.Scene;
-import javafx.stage.Stage;
 import javafx.stage.Window;
 
 import java.io.IOException;
 
 public class UINavigator {
 
-    public static final int GUI_WIDTH = 1000;
-    public static final int GUI_HEIGHT = 600;
+    private static final int GUI_WIDTH = 1000;
+    private static final int GUI_HEIGHT = 600;
 
     private Scene mainScene;
     private Window primaryWindow;
@@ -43,8 +42,11 @@
 
     }
 
-    public Window getPrimaryStage() {
-        return primaryWindow;
-    }
+    public void changeToCourseCreation() throws IOException {
+        Parent creationView = FXMLLoader.load(
+                getClass().getResource("/gui/course-creation.fxml")
+        );
 
+        mainScene.setRoot(creationView);
+    }
 }
Index: src/main/java/era/uploader/controller/CourseCreationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package era.uploader.controller;\n\n/**\n * TODO implement this class over break\n * This class needs to have a GUI that will take in a CSV file. Generate a\n * bunch of students from that CSV file using\n * {@link era.uploader.service.CourseCreationService}, and then output the\n * courses created with the students created from the courses\n */\npublic class CourseCreationController {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/era/uploader/controller/CourseCreationController.java	(date 1511933788000)
+++ src/main/java/era/uploader/controller/CourseCreationController.java	(revision )
@@ -1,5 +1,33 @@
 package era.uploader.controller;
 
+import com.google.common.collect.Multimap;
+import era.uploader.data.database.CourseDAOImpl;
+import era.uploader.data.model.Course;
+import era.uploader.data.model.Semester;
+import era.uploader.data.model.Student;
+import era.uploader.service.CourseCreationService;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
+import javafx.scene.control.Button;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.Label;
+import javafx.scene.control.TableView;
+import javafx.scene.input.MouseEvent;
+import javafx.stage.FileChooser;
+import javafx.stage.Window;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.time.Year;
+import java.time.temporal.TemporalAccessor;
+import java.util.EnumSet;
+import java.util.Optional;
+import java.util.stream.IntStream;
+
 /**
  * TODO implement this class over break
  * This class needs to have a GUI that will take in a CSV file. Generate a
@@ -8,4 +36,144 @@
  * courses created with the students created from the courses
  */
 public class CourseCreationController {
+    @FXML
+    private Button browseFiles;
+    @FXML
+    private TableView<StudentMetaData> output;
+    @FXML
+    private Label chosenFile;
+    @FXML
+    private ComboBox<String> termDropdown;
+    @FXML
+    private ComboBox<Integer> yearDropdown;
+
+    private final FileChooser chooser = new FileChooser();
+    private final CourseCreationService service = new CourseCreationService(CourseDAOImpl.instance());
+
+    private String absoluteChosenFile;
+
+    @FXML
+    void initialize() {
+        chooser.setTitle("Choose roster File");
+        chooser.getExtensionFilters().addAll(
+                new FileChooser.ExtensionFilter("Comma Separated Value (CSV)", "*.csv"),
+                new FileChooser.ExtensionFilter("Plain Text", "*.txt"),
+                new FileChooser.ExtensionFilter("All Files", "*.*")
+        );
+
+        ObservableList<String> availableTerms = FXCollections.observableArrayList();
+        EnumSet.allOf(Semester.Term.class)
+                .stream()
+                .map(Semester.Term::humanReadable)
+                .forEach(availableTerms::add);
+        termDropdown.setPromptText("Term...");
+        termDropdown.setItems(availableTerms);
+
+        int currentYear = Year.now().getValue();
+        ObservableList<Integer> availableYears = FXCollections.observableArrayList();
+        IntStream.rangeClosed(currentYear - 5, currentYear + 5)
+                .forEach(availableYears::add);
+        yearDropdown.setPromptText("Year...");
+        yearDropdown.setItems(availableYears);
+    }
+
+    /**
+     * When {@link #browseFiles} is clicked, an file explorer will show to
+     * allow the user to input their files.
+     *
+     * @param event the mouse click that triggered this handler
+     */
+    public void findrosterFile(MouseEvent event) {
+        final Window buttonScope = browseFiles.getScene().getWindow();
+        File possibleCSVfile = chooser.showOpenDialog(buttonScope);
+
+        if (possibleCSVfile == null ) return; // no more processing needed.
+
+        if (possibleCSVfile.exists()
+                && !possibleCSVfile.isDirectory()) {
+            // we need the absolute path to the chosen csv file so that we can
+            // read it in later in #createCourses. The name is for human reading
+            absoluteChosenFile = possibleCSVfile.getAbsolutePath();
+            chosenFile.setText(possibleCSVfile.getName());
+        } else if (possibleCSVfile.isDirectory()){
+            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
+            errorAlert.setHeaderText("Invalid roster File!");
+            errorAlert.setContentText("The roster file cannot be a directory!");
+            errorAlert.showAndWait();
+        } else {
+            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
+            errorAlert.setHeaderText("Invalid roster File");
+            errorAlert.setContentText("The roster file must exist");
+            errorAlert.showAndWait();
+        }
+    }
+
+    /**
+     * IF there is a valid roster file and a semester chosen, we will start
+     * parsing that roster file and output the courses we created via that file
+     * to the screen.
+     *
+     * @param event the mouse event that triggered this handler
+     */
+    public void createCourses(MouseEvent event) {
+        Optional<Semester> semester = grabCurrentSemester();
+        Optional<String> chosenFile = grabChosenFile();
+
+        Path inputPath = chosenFile
+                .map(Paths::get)
+                .orElse(null);
+
+        if (inputPath == null) {
+            Alert noFile = new Alert(Alert.AlertType.WARNING);
+            noFile.setHeaderText("No file chosen");
+            noFile.setContentText("No roster file has been chosen.");
+            noFile.showAndWait();
+            // short circuit because cannot process anymore
+            return;
+        }
+
+        if (!semester.isPresent()) {
+            Alert noSemester = new Alert(Alert.AlertType.WARNING);
+            noSemester.setHeaderText("No semester chosen");
+            noSemester.setContentText("No semester has been chosen. Please select a year and a term.");
+            noSemester.showAndWait();
+            // short circuit because cannot process anymore
+            return;
+        }
+        Multimap<Course, Student> coursesToStudents = null;
+        try {
+            coursesToStudents = service.createCourses(inputPath, semester.get());
+        } catch (IOException e) {
+            // technically shouldn't be possible but we need to be defensive
+            Alert fileOperationError = new Alert(Alert.AlertType.ERROR);
+            fileOperationError.setHeaderText("Error trying to open roster file.");
+            fileOperationError.setContentText("There was an error trying to open the roster file." +
+                    " Make sure you have permission to access the file's directory.");
+            fileOperationError.showAndWait();
+            // short circuit because cannot process anymore
+            return;
+        }
+
+        ObservableList<StudentMetaData> students = StudentMetaData.fromMultimap(coursesToStudents);
+        output.setItems(students);
+    }
+
+    private Optional<String> grabChosenFile() {
+        return Optional.ofNullable(absoluteChosenFile);
+    }
+
+
+    private Optional<Semester> grabCurrentSemester() {
+        String chosenTerm = termDropdown.getValue();
+        Integer chosenYear = yearDropdown.getValue();
+        Optional<Semester> chosenSemester = Optional.empty();
+
+        if (chosenTerm != null && chosenYear != null) {
+            Semester.Term term = Semester.Term.humanValueOf(chosenTerm);
+            Year year = Year.of(chosenYear);
+            chosenSemester = Optional.of(Semester.of(term, year));
+        }
+
+        return chosenSemester;
+    }
 }

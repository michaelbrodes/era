plugins {
    id 'nu.studer.jooq' version '2.0.9'
    id "org.flywaydb.flyway" version "4.2.0"
}

group 'era.uploader'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // google repos
    compile 'com.google.zxing:core:3.3.0'
    compile 'com.google.zxing:javase:3.3.0'
    compile 'com.google.guava:guava:23.0'
    compile 'com.google.code.gson:gson:2.8.2'
    // pdf stuff
    compile 'org.apache.pdfbox:pdfbox:2.0.7'
    //Client communication stuff
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile 'org.apache.httpcomponents:httpmime:4.5.3'
    // database stuff
    compile 'org.xerial:sqlite-jdbc:3.20.0'
    compile 'org.jooq:jooq:3.10.0'
    testCompile 'junit:junit:4.12'
    jooqRuntime 'org.xerial:sqlite-jdbc:3.20.0'
}

File dbFile = file("uploader.db")

task statOrCreateDB() {
    doLast {
        def propertiesFile = file("uploader.properties")
        if (!propertiesFile.exists()) {
            throw new InvalidUserDataException("Could not find file uploader.properties")
        }

        println "Checking " + propertiesFile.absolutePath + " for db.url"
        def props = new Properties()
        propertiesFile.withInputStream { props.load(it) }
        def dbUrl = props.getProperty("db.url")
        if (dbUrl == null) {
            throw new InvalidUserDataException("No db.url property in the uploader.properties file")
        }

        println "Checking if " + dbUrl + " exists yet"
        dbFile = file(dbUrl)
        if (!dbFile.exists()) {
            println "Creating a new db file at " + dbFile.absolutePath
            if (!dbFile.createNewFile()) {
                throw new UncheckedIOException(
                        new IOException("Cannot create " + dbFile.absolutePath + ". Possibly bad permissions?")
                )
            }
        }
    }
}

flywayMigrate.dependsOn statOrCreateDB
flywayBaseline.dependsOn statOrCreateDB
flywayClean.dependsOn statOrCreateDB
flywayInfo.dependsOn statOrCreateDB
flywayRepair.dependsOn statOrCreateDB
flywayValidate.dependsOn statOrCreateDB

flyway {
    url = 'jdbc:sqlite:' + dbFile.absolutePath
    locations = [
            'filesystem:src/main/resources/migrations'
    ]
}

jooq {
    version = '3.10.0'
    edition = 'OSS'
    uploaderDB(sourceSets.main) {
        jdbc {
            driver = 'org.sqlite.JDBC'
            url = 'jdbc:sqlite:' + dbFile.absolutePath
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.sqlite.SQLiteDatabase'
            }
            generate {
                relations = true
                deprecated = false
                generatedAnnotation = true
                records = true
                fluentSetters = true
            }
            target {
                packageName = 'era.uploader.data.database.jooq'
                directory = 'src/main/java'
            }
        }
    }
}

jar {
    from configurations.compile.collect {
        zipTree it
    }

    manifest.attributes "Main-Class" : "era.uploader.UploaderApp"
}

task run (type: JavaExec, dependsOn: classes) {
    main 'era.uploader.UploaderApp'
    classpath sourceSets.main.runtimeClasspath
}

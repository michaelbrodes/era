/*
 * This file is generated by jOOQ.
*/
package era.uploader.data.database.jooq.tables;


import era.uploader.data.database.jooq.DefaultSchema;
import era.uploader.data.database.jooq.Indexes;
import era.uploader.data.database.jooq.Keys;
import era.uploader.data.database.jooq.tables.records.QrCodeMappingRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrCodeMapping extends TableImpl<QrCodeMappingRecord> {

    private static final long serialVersionUID = 1789487154;

    /**
     * The reference instance of <code>qr_code_mapping</code>
     */
    public static final QrCodeMapping QR_CODE_MAPPING = new QrCodeMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrCodeMappingRecord> getRecordType() {
        return QrCodeMappingRecord.class;
    }

    /**
     * The column <code>qr_code_mapping.uuid</code>.
     */
    public final TableField<QrCodeMappingRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>qr_code_mapping.sequence_number</code>.
     */
    public final TableField<QrCodeMappingRecord, Integer> SEQUENCE_NUMBER = createField("sequence_number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>qr_code_mapping.student_id</code>.
     */
    public final TableField<QrCodeMappingRecord, Integer> STUDENT_ID = createField("student_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>qr_code_mapping</code> table reference
     */
    public QrCodeMapping() {
        this(DSL.name("qr_code_mapping"), null);
    }

    /**
     * Create an aliased <code>qr_code_mapping</code> table reference
     */
    public QrCodeMapping(String alias) {
        this(DSL.name(alias), QR_CODE_MAPPING);
    }

    /**
     * Create an aliased <code>qr_code_mapping</code> table reference
     */
    public QrCodeMapping(Name alias) {
        this(alias, QR_CODE_MAPPING);
    }

    private QrCodeMapping(Name alias, Table<QrCodeMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrCodeMapping(Name alias, Table<QrCodeMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_QR_CODE_MAPPING_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QrCodeMappingRecord> getPrimaryKey() {
        return Keys.PK_QR_CODE_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QrCodeMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<QrCodeMappingRecord>>asList(Keys.PK_QR_CODE_MAPPING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QrCodeMappingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QrCodeMappingRecord, ?>>asList(Keys.FK_QR_CODE_MAPPING_STUDENT_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QrCodeMapping as(String alias) {
        return new QrCodeMapping(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QrCodeMapping as(Name alias) {
        return new QrCodeMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrCodeMapping rename(String name) {
        return new QrCodeMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrCodeMapping rename(Name name) {
        return new QrCodeMapping(name, null);
    }
}

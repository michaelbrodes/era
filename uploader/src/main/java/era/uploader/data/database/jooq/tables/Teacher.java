/*
 * This file is generated by jOOQ.
*/
package era.uploader.data.database.jooq.tables;


import era.uploader.data.database.jooq.DefaultSchema;
import era.uploader.data.database.jooq.Indexes;
import era.uploader.data.database.jooq.Keys;
import era.uploader.data.database.jooq.tables.records.TeacherRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teacher extends TableImpl<TeacherRecord> {

    private static final long serialVersionUID = -199518244;

    /**
     * The reference instance of <code>teacher</code>
     */
    public static final Teacher TEACHER = new Teacher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeacherRecord> getRecordType() {
        return TeacherRecord.class;
    }

    /**
     * The column <code>teacher.unique_id</code>.
     */
    public final TableField<TeacherRecord, Integer> UNIQUE_ID = createField("unique_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>teacher.name</code>.
     */
    public final TableField<TeacherRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>teacher</code> table reference
     */
    public Teacher() {
        this(DSL.name("teacher"), null);
    }

    /**
     * Create an aliased <code>teacher</code> table reference
     */
    public Teacher(String alias) {
        this(DSL.name(alias), TEACHER);
    }

    /**
     * Create an aliased <code>teacher</code> table reference
     */
    public Teacher(Name alias) {
        this(alias, TEACHER);
    }

    private Teacher(Name alias, Table<TeacherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teacher(Name alias, Table<TeacherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_TEACHER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeacherRecord> getPrimaryKey() {
        return Keys.PK_TEACHER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeacherRecord>> getKeys() {
        return Arrays.<UniqueKey<TeacherRecord>>asList(Keys.PK_TEACHER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teacher as(String alias) {
        return new Teacher(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teacher as(Name alias) {
        return new Teacher(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teacher rename(String name) {
        return new Teacher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teacher rename(Name name) {
        return new Teacher(name, null);
    }
}
